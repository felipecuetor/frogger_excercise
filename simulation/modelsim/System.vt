// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/06/2018 22:30:33"
                                                                                
// Verilog Test Bench template for design : System
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module System_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
parameter TCK = 20; // clock period in ns
parameter CLK_FREQ = 1000000000 / TCK; // Frequenzy in HZ
parameter DATAWIDTH_BUS = 8;
integer ii=0;
// test vector input registers
reg B_Down;
reg B_Left;
reg B_Right;
reg B_Up;
reg CLOCK_50;
reg RESET;
reg B_Start;
// wires                                               
wire [7:0]  LED;
wire MAX7219_CLK;
wire MAX7219_CS;
wire MAX7219_DIN;

wire [7:0] led_final_7_tester;
wire [7:0] led_final_6_tester;
wire [7:0] led_final_5_tester;
wire [7:0] led_final_4_tester;
wire [7:0] led_final_3_tester;
wire [7:0] led_final_2_tester;
wire [7:0] led_final_1_tester;
wire [7:0] led_final_0_tester;



// assign statements (if any)                          
System i1 (
// port map - connection between master ports and signals/registers   
	.B_Down(B_Down),
	.B_Left(B_Left),
	.B_Right(B_Right),
	.B_Up(B_Up),
	.CLOCK_50(CLOCK_50),
	.LED(LED),
	.MAX7219_CLK(MAX7219_CLK),
	.MAX7219_CS(MAX7219_CS),
	.MAX7219_DIN(MAX7219_DIN),
	.RESET(RESET),
	.B_Start(B_Start),
	.led_final_7_tester(led_final_7_tester),
	.led_final_6_tester(led_final_6_tester),
	.led_final_5_tester(led_final_5_tester),
	.led_final_4_tester(led_final_4_tester),
	.led_final_3_tester(led_final_3_tester),
	.led_final_2_tester(led_final_2_tester),
	.led_final_1_tester(led_final_1_tester),
	.led_final_0_tester(led_final_0_tester)
	
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
  CLOCK_50 <= 0;                                                
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin: tester      
	//Tests de Gray a Binario
	/**
	reg B_Down;
	reg B_Left;
	reg B_Right;
	reg B_Up;
	reg CLOCK_50;
	reg RESET;
	reg B_Start;
	*/
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 1;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 1;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 1;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 1;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 1;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 1;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 1;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 1;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 1;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 1;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 1;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 1;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 1;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 1;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 1;
	#10 	B_Down <= 0;B_Left <= 0;B_Right <= 0;B_Up <= 0;RESET <= 0;B_Start <= 0;CLOCK_50 <= 0;
@eachvec;
$finish;                                                         
// --> end                                             
end                                                    
endmodule

